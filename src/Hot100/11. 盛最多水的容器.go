package Hot100

/*对比
11. 盛最多水的容器    64.1%    中等【双指针，单调栈不可行】
42. 接雨水	55.7%	困难【双指针+递归，动态规划，双指针，栈】
84. 柱状图中最大的矩形	42.9%	困难【单调栈（单减栈）】
*/

//11. 盛最多水的容器
//给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
//
//说明：你不能倾斜容器。
//
//
//
//示例 1：
//
//
//
//输入：[1,8,6,2,5,4,8,3,7]
//输出：49
//解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
//示例 2：
//
//输入：height = [1,1]
//输出：1
//示例 3：
//
//输入：height = [4,3,2,1,4]
//输出：16
//示例 4：
//
//输入：height = [1,2,1]
//输出：2
//
//
//提示：
//
//n = height.length
//2 <= n <= 3 * 104
//0 <= height[i] <= 3 * 104

// 使用双指针，在于最大面积只关注边界，不关注内部细节
// 使用栈，可以分析内部每个位置的情况
func maxArea(height []int) int {
	length := len(height)
	left, right := 0, length-1

	ret := 0
	for {
		ret = maxInt(ret, minInt(height[left], height[right])*(right-left))
		if height[left] < height[right] {
			left++
		} else {
			right--
		}
		if left >= right {
			break
		}
	}
	return ret
}
